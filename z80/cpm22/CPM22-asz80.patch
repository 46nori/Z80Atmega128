--- CPM22.Z80	2023-07-11 00:01:59.020534000 +0900
+++ cpm22.asm	2023-07-12 15:22:50.237644300 +0900
@@ -11,35 +11,37 @@
 ;   Set memory limit here. This is the amount of contigeous
 ; ram starting from 0000. CP/M will reside at the end of this space.
 ;
-MEM	EQU	62		;for a 62k system (TS802 TEST - WORKS OK).
+MEM	.equ	62		;for a 62k system (TS802 TEST - WORKS OK).
 ;
-IOBYTE	EQU	3		;i/o definition byte.
-TDRIVE	EQU	4		;current drive name and user number.
-ENTRY	EQU	5		;entry point for the cp/m bdos.
-TFCB	EQU	5CH		;default file control block.
-TBUFF	EQU	80H		;i/o buffer and command line storage.
-TBASE	EQU	100H		;transiant program storage area.
+IOBYTE	.equ	3		;i/o definition byte.
+TDRIVE	.equ	4		;current drive name and user number.
+ENTRY	.equ	5		;entry point for the cp/m bdos.
+TFCB	.equ	0x5C		;default file control block.
+TBUFF	.equ	0x80		;i/o buffer and command line storage.
+TBASE	.equ	0x100		;transiant program storage area.
 ;
 ;   Set control character equates.
 ;
-CNTRLC	EQU	3		;control-c
-CNTRLE	EQU	05H		;control-e
-BS	EQU	08H		;backspace
-TAB	EQU	09H		;tab
-LF	EQU	0AH		;line feed
-FF	EQU	0CH		;form feed
-CR	EQU	0DH		;carriage return
-CNTRLP	EQU	10H		;control-p
-CNTRLR	EQU	12H		;control-r
-CNTRLS	EQU	13H		;control-s
-CNTRLU	EQU	15H		;control-u
-CNTRLX	EQU	18H		;control-x
-CNTRLZ	EQU	1AH		;control-z (end-of-file mark)
-DEL	EQU	7FH		;rubout
+CNTRLC	.equ	3		;control-c
+CNTRLE	.equ	0x05		;control-e
+BS	.equ	0x08		;backspace
+TAB	.equ	0x09		;tab
+LF	.equ	0x0A		;line feed
+FF	.equ	0x0C		;form feed
+CR	.equ	0x0D		;carriage return
+CNTRLP	.equ	0x10		;control-p
+CNTRLR	.equ	0x12		;control-r
+CNTRLS	.equ	0x13		;control-s
+CNTRLU	.equ	0x15		;control-u
+CNTRLX	.equ	0x18		;control-x
+CNTRLZ	.equ	0x1A		;control-z (end-of-file mark)
+DEL	.equ	0x7F		;rubout
 ;
 ;   Set origin for CP/M
 ;
-	ORG	(MEM-7)*1024
+	.z80
+	.area CPM (ABS)
+	.org	(MEM-7)*1024
 ;
 CBASE:	JP	COMMAND		;execute command processor (ccp).
 	JP	CLEARBUF	;entry to empty input buffer before starting ccp.
@@ -48,16 +50,16 @@
 ;   Standard cp/m ccp input buffer. Format is (max length),
 ; (actual length), (char #1), (char #2), (char #3), etc.
 ;
-INBUFF:	DEFB	127		;length of input buffer.
-	DEFB	0		;current length of contents.
-	DEFB	'Copyright'
-	DEFB	' 1979 (c) by Digital Research      '
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-INPOINT:DEFW	INBUFF+2	;input line pointer
-NAMEPNT:DEFW	0		;input line pointer used for error message. Points to
+INBUFF:	.db	127		;length of input buffer.
+	.db	0		;current length of contents.
+	.str	"Copyright"
+	.str	" 1979 (c) by Digital Research      "
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+INPOINT:.dw	INBUFF+2	;input line pointer
+NAMEPNT:.dw	0		;input line pointer used for error message. Points to
 ;			;start of name in error.
 ;
 ;   Routine to print (A) on the console. All registers used.
@@ -83,7 +85,7 @@
 ;
 ;   Routine to send one space to the console and save (BC).
 ;
-SPACE:	LD	A,' '
+SPACE:	LD	A," "
 	JP	PRINTB
 ;
 ;   Routine to print character string pointed to be (BC) on the
@@ -195,7 +197,7 @@
 ;
 ;   Get the current user code.
 ;
-GETUSR:	LD	E,0FFH
+GETUSR:	LD	E,0xFF
 ;
 ;   Routne to get or set the current user code.
 ; If (E) is FF then this is a GET, else it is a SET.
@@ -224,11 +226,11 @@
 ;   Routine to convert (A) into upper case ascii. Only letters
 ; are affected.
 ;
-UPPER:	CP	'a'		;check for letters in the range of 'a' to 'z'.
+UPPER:	CP	"a"		;check for letters in the range of 'a' to 'z'.
 	RET	C
-	CP	'{'
+	CP	"{"
 	RET	NC
-	AND	5FH		;convert it if found.
+	AND	0x5F		;convert it if found.
 	RET	
 ;
 ;   Routine to get a line of input. We must check to see if the
@@ -376,7 +378,7 @@
 SYNERR:	CALL	CRLF		;end current line.
 	LD	HL,(NAMEPNT)	;this points to name in error.
 SYNERR1:LD	A,(HL)		;print it until a space or null is found.
-	CP	' '
+	CP	" "
 	JP	Z,SYNERR2
 	OR	A
 	JP	Z,SYNERR2
@@ -385,7 +387,7 @@
 	POP	HL
 	INC	HL
 	JP	SYNERR1
-SYNERR2:LD	A,'?'		;add trailing '?'.
+SYNERR2:LD	A,"?"		;add trailing '?'.
 	CALL	PRINT
 	CALL	CRLF
 	CALL	DELBATCH	;delete any batch file.
@@ -397,22 +399,22 @@
 CHECK:	LD	A,(DE)
 	OR	A
 	RET	Z
-	CP	' '		;control characters are not legal here.
+	CP	" "		;control characters are not legal here.
 	JP	C,SYNERR
 	RET	Z		;check for valid delimiter.
-	CP	'='
+	CP	"="
 	RET	Z
-	CP	'_'
+	CP	"_"
 	RET	Z
-	CP	'.'
+	CP	"."
 	RET	Z
-	CP	':'
+	CP	":"
 	RET	Z
-	CP	';'
+	CP	";"
 	RET	Z
-	CP	'<'
+	CP	"<"
 	RET	Z
-	CP	'>'
+	CP	">"
 	RET	Z
 	RET	
 ;
@@ -421,7 +423,7 @@
 NONBLANK: LD	A,(DE)
 	OR	A		;string ends with a null.
 	RET	Z
-	CP	' '
+	CP	" "
 	RET	NZ
 	INC	DE
 	JP	NONBLANK
@@ -458,11 +460,11 @@
 	LD	A,(DE)		;get first character.
 	OR	A
 	JP	Z,CONVRT1
-	SBC	A,'A'-1		;might be a drive name, convert to binary.
+	SBC	A,"A"-1		;might be a drive name, convert to binary.
 	LD	B,A		;and save.
 	INC	DE		;check next character for a ':'.
 	LD	A,(DE)
-	CP	':'
+	CP	":"
 	JP	Z,CONVRT2
 	DEC	DE		;nope, move pointer back to the start of the line.
 CONVRT1:LD	A,(CDRIVE)
@@ -475,13 +477,13 @@
 ;
 ;   Convert the basic file name.
 ;
-CONVRT3:LD	B,08H
+CONVRT3:LD	B,0x08
 CONVRT4:CALL	CHECK
 	JP	Z,CONVRT8
 	INC	HL
-	CP	'*'		;note that an '*' will fill the remaining
+	CP	"*"		;note that an '*' will fill the remaining
 	JP	NZ,CONVRT5	;field with '?'.
-	LD	(HL),'?'
+	LD	(HL),"?"
 	JP	CONVRT6
 CONVRT5:LD	(HL),A
 	INC	DE
@@ -492,22 +494,22 @@
 	INC	DE
 	JP	CONVRT7
 CONVRT8:INC	HL		;blank fill the file name.
-	LD	(HL),' '
+	LD	(HL)," "
 	DEC	B
 	JP	NZ,CONVRT8
 ;
 ;   Get the extension and convert it.
 ;
-GETEXT:	LD	B,03H
-	CP	'.'
+GETEXT:	LD	B,0x03
+	CP	"."
 	JP	NZ,GETEXT5
 	INC	DE
 GETEXT1:CALL	CHECK
 	JP	Z,GETEXT5
 	INC	HL
-	CP	'*'
+	CP	"*"
 	JP	NZ,GETEXT2
-	LD	(HL),'?'
+	LD	(HL),"?"
 	JP	GETEXT3
 GETEXT2:LD	(HL),A
 	INC	DE
@@ -518,7 +520,7 @@
 	INC	DE
 	JP	GETEXT4
 GETEXT5:INC	HL
-	LD	(HL),' '
+	LD	(HL)," "
 	DEC	B
 	JP	NZ,GETEXT5
 GETEXT6:LD	B,3
@@ -536,7 +538,7 @@
 	LD	BC,11		;set name length.
 GETEXT8:INC	HL
 	LD	A,(HL)
-	CP	'?'		;any question marks?
+	CP	"?"		;any question marks?
 	JP	NZ,GETEXT9
 	INC	B		;count them.
 GETEXT9:DEC	C
@@ -547,18 +549,18 @@
 ;
 ;   CP/M command table. Note commands can be either 3 or 4 characters long.
 ;
-NUMCMDS EQU	6		;number of commands
-CMDTBL:	DEFB	'DIR '
-	DEFB	'ERA '
-	DEFB	'TYPE'
-	DEFB	'SAVE'
-	DEFB	'REN '
-	DEFB	'USER'
+NUMCMDS .equ	6		;number of commands
+CMDTBL:	.str	"DIR "
+	.str	"ERA "
+	.str	"TYPE"
+	.str	"SAVE"
+	.str	"REN "
+	.str	"USER"
 ;
 ;   The following six bytes must agree with those at (PATTRN2)
 ; or cp/m will HALT. Why?
 ;
-PATTRN1:DEFB	0,22,0,0,0,0	;(* serial number bytes *).
+PATTRN1:.db	0,22,0,0,0,0	;(* serial number bytes *).
 ;
 ;   Search the command table for a match with what has just
 ; been entered. If a match is found, then we jump to the
@@ -581,7 +583,7 @@
 	DEC	B
 	JP	NZ,SEARCH2
 	LD	A,(DE)		;allow a 3 character command to match.
-	CP	' '
+	CP	" "
 	JP	NZ,SEARCH4
 	LD	A,C		;set return register for this command.
 	RET	
@@ -611,14 +613,14 @@
 	RRA	
 	RRA	
 	RRA	
-	AND	0FH		;isolate the user number.
+	AND	0x0F		;isolate the user number.
 	LD	E,A
 	CALL	GETSETUC	;and set it.
 	CALL	RESDSK		;reset the disk system.
 	LD	(BATCH),A	;clear batch mode flag.
 	POP	BC
 	LD	A,C
-	AND	0FH		;isolate the drive number.
+	AND	0x0F		;isolate the drive number.
 	LD	(CDRIVE),A	;and save.
 	CALL	DSKSEL		;...and select.
 	LD	A,(INBUFF+1)
@@ -630,9 +632,9 @@
 CMMND1:	LD	SP,CCPSTACK	;set stack straight.
 	CALL	CRLF		;start a new line on the screen.
 	CALL	GETDSK		;get current drive.
-	ADD	A,'a'
+	ADD	A,"a"
 	CALL	PRINT		;print current drive.
-	LD	A,'>'
+	LD	A,">"
 	CALL	PRINT		;and add prompt.
 	CALL	GETINP		;get line from user.
 ;
@@ -666,12 +668,12 @@
 ;
 ;   CP/M command address table.
 ;
-CMDADR:	DEFW	DIRECT,ERASE,TYPE,SAVE
-	DEFW	RENAME,USER,UNKNOWN
+CMDADR:	.dw	DIRECT,ERASE,TYPE,SAVE
+	.dw	RENAME,USER,UNKNOWN
 ;
 ;   Halt the system. Reason for this is unknown at present.
 ;
-HALT:	LD	HL,76F3H	;'DI HLT' instructions.
+HALT:	LD	HL,0x76F3	;'DI HLT' instructions.
 	LD	(CBASE),HL
 	LD	HL,CBASE
 	JP	(HL)
@@ -680,13 +682,15 @@
 ;
 RDERROR:LD	BC,RDERR
 	JP	PLINE
-RDERR:	DEFB	'Read error',0
+RDERR:	.str	"Read error"
+	.db	0
 ;
 ;   Required file was not located.
 ;
 NONE:	LD	BC,NOFILE
 	JP	PLINE
-NOFILE:	DEFB	'No file',0
+NOFILE:	.str	"No file"
+	.db	0
 ;
 ;   Decode a command of the form 'A>filename number{ filename}.
 ; Note that a drive specifier is not allowed on the first file
@@ -700,15 +704,15 @@
 	LD	HL,FCB+1	;convert number now.
 	LD	BC,11		;(B)=sum register, (C)=max digit count.
 DECODE1:LD	A,(HL)
-	CP	' '		;a space terminates the numeral.
+	CP	" "		;a space terminates the numeral.
 	JP	Z,DECODE3
 	INC	HL
-	SUB	'0'		;make binary from ascii.
+	SUB	"0"		;make binary from ascii.
 	CP	10		;legal digit?
 	JP	NC,SYNERR
 	LD	D,A		;yes, save it in (D).
 	LD	A,B		;compute (B)=(B)*10 and check for overflow.
-	AND	0E0H
+	AND	0xE0
 	JP	NZ,SYNERR
 	LD	A,B
 	RLCA	
@@ -725,7 +729,7 @@
 	JP	NZ,DECODE1
 	RET	
 DECODE3:LD	A,(HL)		;spaces must follow (why?).
-	CP	' '
+	CP	" "
 	JP	NZ,SYNERR
 	INC	HL
 DECODE4:DEC	C
@@ -794,10 +798,10 @@
 	CALL	DSELECT		;select indicated drive.
 	LD	HL,FCB+1	;was any file indicated?
 	LD	A,(HL)
-	CP	' '
+	CP	" "
 	JP	NZ,DIRECT2
 	LD	B,11		;no. Fill field with '?' - same as *.*.
-DIRECT1:LD	(HL),'?'
+DIRECT1:LD	(HL),"?"
 	INC	HL
 	DEC	B
 	JP	NZ,DIRECT1
@@ -810,7 +814,7 @@
 	RRCA	
 	RRCA	
 	RRCA	
-	AND	60H		;(A)=position*32
+	AND	0x60		;(A)=position*32
 	LD	C,A
 	LD	A,10
 	CALL	EXTRACT		;extract the tenth entry in fcb.
@@ -820,27 +824,27 @@
 	LD	A,E		;bump name count.
 	INC	E
 	PUSH	DE
-	AND	03H		;at end of line?
+	AND	0x03		;at end of line?
 	PUSH	AF
 	JP	NZ,DIRECT4
 	CALL	CRLF		;yes, end this line and start another.
 	PUSH	BC
 	CALL	GETDSK		;start line with ('A:').
 	POP	BC
-	ADD	A,'A'
+	ADD	A,"A"
 	CALL	PRINTB
-	LD	A,':'
+	LD	A,":"
 	CALL	PRINTB
 	JP	DIRECT5
 DIRECT4:CALL	SPACE		;add seperator between file names.
-	LD	A,':'
+	LD	A,":"
 	CALL	PRINTB
 DIRECT5:CALL	SPACE
 	LD	B,1		;'extract' each file name character at a time.
 DIRECT6:LD	A,B
 	CALL	EXTRACT
-	AND	7FH		;strip bit 7 (status bit).
-	CP	' '		;are we at the end of the name?
+	AND	0x7F		;strip bit 7 (status bit).
+	CP	" "		;are we at the end of the name?
 	JP	NZ,DRECT65
 	POP	AF		;yes, don't print spaces at the end of a line.
 	PUSH	AF
@@ -848,10 +852,10 @@
 	JP	NZ,DRECT63
 	LD	A,9		;first check for no extension.
 	CALL	EXTRACT
-	AND	7FH
-	CP	' '
+	AND	0x7F
+	CP	" "
 	JP	Z,DIRECT7	;don't print spaces.
-DRECT63:LD	A,' '		;else print them.
+DRECT63:LD	A," "		;else print them.
 DRECT65:CALL	PRINTB
 	INC	B		;bump to next character psoition.
 	LD	A,B
@@ -886,7 +890,7 @@
 	JP	NZ,CMMND1
 	INC	HL
 	LD	A,(HL)
-	CP	'Y'
+	CP	"Y"
 	JP	NZ,CMMND1
 	INC	HL
 	LD	(INPOINT),HL	;save input line pointer.
@@ -896,7 +900,8 @@
 	INC	A
 	CALL	Z,NONE		;not there?
 	JP	GETBACK		;return to command level now.
-YESNO:	DEFB	'All (y/n)?',0
+YESNO:	.str	"All (y/n)?"
+	.db	0
 ;
 ;**************************************************************
 ;*
@@ -911,7 +916,7 @@
 	JP	Z,TYPE5		;not there?
 	CALL	CRLF		;ok, start a new line on the screen.
 	LD	HL,NBYTES	;initialize byte counter.
-	LD	(HL),0FFH	;set to read first sector.
+	LD	(HL),0xFF	;set to read first sector.
 TYPE1:	LD	HL,NBYTES
 TYPE2:	LD	A,(HL)		;have we written the entire sector?
 	CP	128
@@ -994,7 +999,8 @@
 	CALL	PLINE
 SAVE4:	CALL	STDDMA		;reset the standard dma address.
 	JP	GETBACK
-NOSPACE:DEFB	'No space',0
+NOSPACE:.str	"No space"
+	.db	0
 ;
 ;**************************************************************
 ;*
@@ -1016,9 +1022,9 @@
 	LD	HL,(INPOINT)	;get input pointer.
 	EX	DE,HL
 	CALL	NONBLANK	;get next non blank character.
-	CP	'='		;only allow an '=' or '_' seperator.
+	CP	"="		;only allow an '=' or '_' seperator.
 	JP	Z,RENAME1
-	CP	'_'
+	CP	"_"
 	JP	NZ,RENAME5
 RENAME1:EX	DE,HL
 	INC	HL		;ok, skip seperator.
@@ -1052,7 +1058,8 @@
 RENAME6:LD	BC,EXISTS	;destination file already exists.
 	CALL	PLINE
 	JP	GETBACK
-EXISTS:	DEFB	'File exists',0
+EXISTS:	.str	"File exists"
+	.db	0
 ;
 ;**************************************************************
 ;*
@@ -1065,7 +1072,7 @@
 	JP	NC,SYNERR
 	LD	E,A		;yes but is there anything else?
 	LD	A,(FCB+1)
-	CP	' '
+	CP	" "
 	JP	Z,SYNERR	;yes, that is not allowed.
 	CALL	GETSETUC	;ok, set user code.
 	JP	GETBACK1
@@ -1078,7 +1085,7 @@
 ;
 UNKNOWN:CALL	VERIFY		;check for valid system (why?).
 	LD	A,(FCB+1)	;anything to execute?
-	CP	' '
+	CP	" "
 	JP	NZ,UNKWN1
 	LD	A,(CHGDRV)	;nope, only a drive change?
 	OR	A
@@ -1093,7 +1100,7 @@
 ;
 UNKWN1:	LD	DE,FCB+9	;an extension specified?
 	LD	A,(DE)
-	CP	' '
+	CP	" "
 	JP	NZ,SYNERR	;yes, not allowed.
 UNKWN2:	PUSH	DE
 	CALL	DSELECT		;select specified drive.
@@ -1149,7 +1156,7 @@
 UNKWN5:	LD	A,(HL)		;line down to (0080h). Look for a non blank.
 	OR	A		;or a null.
 	JP	Z,UNKWN6
-	CP	' '
+	CP	" "
 	JP	Z,UNKWN6
 	INC	HL
 	JP	UNKWN5
@@ -1187,8 +1194,9 @@
 UNKWN0:	LD	BC,BADLOAD	;read error or won't fit.
 	CALL	PLINE
 	JP	GETBACK
-BADLOAD:DEFB	'Bad load',0
-COMFILE:DEFB	'COM'		;command file extension.
+BADLOAD:.str	"Bad load"
+	.db	0
+COMFILE:.str	"COM"		;command file extension.
 ;
 ;   Get here to return to command level. We will reset the
 ; previous active drive and then either return to command
@@ -1197,7 +1205,7 @@
 GETBACK:CALL	RESETDR		;reset previous drive.
 GETBACK1: CALL	CONVFST		;convert first name in (FCB).
 	LD	A,(FCB+1)	;if this was just a drive change request,
-	SUB	' '		;make sure it was valid.
+	SUB	" "		;make sure it was valid.
 	LD	HL,CHGDRV
 	OR	(HL)
 	JP	NZ,SYNERR
@@ -1205,30 +1213,36 @@
 ;
 ;   ccp stack area.
 ;
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-CCPSTACK EQU	$	;end of ccp stack area.
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+CCPSTACK .equ	#.	;end of ccp stack area.
 ;
 ;   Batch (or SUBMIT) processing information storage.
 ;
-BATCH:	DEFB	0		;batch mode flag (0=not active).
-BATCHFCB: DEFB	0,'$$$     SUB',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+BATCH:	.db	0		;batch mode flag (0=not active).
+BATCHFCB: .db	0
+		.str "$$$     SUB"
+		.db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 ;
 ;   File control block setup by the CCP.
 ;
-FCB:	DEFB	0,'           ',0,0,0,0,0,'           ',0,0,0,0,0
-RTNCODE:DEFB	0		;status returned from bdos call.
-CDRIVE:	DEFB	0		;currently active drive.
-CHGDRV:	DEFB	0		;change in drives flag (0=no change).
-NBYTES:	DEFW	0		;byte counter used by TYPE.
+FCB:	.db	0
+		.str "           "
+		.db 0,0,0,0,0
+		.str "           "
+		.db 0,0,0,0,0
+RTNCODE:.db	0		;status returned from bdos call.
+CDRIVE:	.db	0		;currently active drive.
+CHGDRV:	.db	0		;change in drives flag (0=no change).
+NBYTES:	.dw	0		;byte counter used by TYPE.
 ;
 ;   Room for expansion?
 ;
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0
 ;
 ;   Note that the following six bytes must match those at
 ; (PATTRN1) or cp/m will HALT. Why?
 ;
-PATTRN2:DEFB	0,22,0,0,0,0	;(* serial number bytes *).
+PATTRN2:.db	0,22,0,0,0,0	;(* serial number bytes *).
 ;
 ;**************************************************************
 ;*
@@ -1240,10 +1254,10 @@
 ;
 ;   Bdos error table.
 ;
-BADSCTR:DEFW	ERROR1		;bad sector on read or write.
-BADSLCT:DEFW	ERROR2		;bad disk select.
-RODISK:	DEFW	ERROR3		;disk is read only.
-ROFILE:	DEFW	ERROR4		;file is read only.
+BADSCTR:.dw	ERROR1		;bad sector on read or write.
+BADSLCT:.dw	ERROR2		;bad disk select.
+RODISK:	.dw	ERROR3		;disk is read only.
+ROFILE:	.dw	ERROR4		;file is read only.
 ;
 ;   Entry into bdos. (DE) or (E) are the parameters passed. The
 ; function number desired is in register (C).
@@ -1281,14 +1295,14 @@
 ;
 ;   BDOS function jump table.
 ;
-NFUNCTS EQU	41		;number of functions in followin table.
+NFUNCTS .equ	41		;number of functions in followin table.
 ;
-FUNCTNS:DEFW	WBOOT,GETCON,OUTCON,GETRDR,PUNCH,LIST,DIRCIO,GETIOB
-	DEFW	SETIOB,PRTSTR,RDBUFF,GETCSTS,GETVER,RSTDSK,SETDSK,OPENFIL
-	DEFW	CLOSEFIL,GETFST,GETNXT,DELFILE,READSEQ,WRTSEQ,FCREATE
-	DEFW	RENFILE,GETLOG,GETCRNT,PUTDMA,GETALOC,WRTPRTD,GETROV,SETATTR
-	DEFW	GETPARM,GETUSER,RDRANDOM,WTRANDOM,FILESIZE,SETRAN,LOGOFF,RTN
-	DEFW	RTN,WTSPECL
+FUNCTNS:.dw	WBOOT,GETCON,OUTCON,GETRDR,PUNCH,LIST,DIRCIO,GETIOB
+	.dw	SETIOB,PRTSTR,RDBUFF,GETCSTS,GETVER,RSTDSK,SETDSK,OPENFIL
+	.dw	CLOSEFIL,GETFST,GETNXT,DELFILE,READSEQ,WRTSEQ,FCREATE
+	.dw	RENFILE,GETLOG,GETCRNT,PUTDMA,GETALOC,WRTPRTD,GETROV,SETATTR
+	.dw	GETPARM,GETUSER,RDRANDOM,WTRANDOM,FILESIZE,SETRAN,LOGOFF,RTN
+	.dw	RTN,WTSPECL
 ;
 ;   Bdos error message section.
 ;
@@ -1309,19 +1323,19 @@
 ERROR5:	CALL	PRTERR
 	JP	0		;always reboot on these errors.
 ;
-BDOSERR:DEFB	'Bdos Err On '
-BDOSDRV:DEFB	' : $'
-BADSEC:	DEFB	'Bad Sector$'
-BADSEL:	DEFB	'Select$'
-FILERO:	DEFB	'File '
-DISKRO:	DEFB	'R/O$'
+BDOSERR:.str	"Bdos Err On "
+BDOSDRV:.str	" : $"
+BADSEC:	.str	"Bad Sector$"
+BADSEL:	.str	"Select$"
+FILERO:	.str	"File "
+DISKRO:	.str	"R/O$"
 ;
 ;   Print bdos error message.
 ;
 PRTERR:	PUSH	HL		;save second message pointer.
 	CALL	OUTCRLF		;send (cr)(lf).
 	LD	A,(ACTIVE)	;get active drive.
-	ADD	A,'A'		;make ascii.
+	ADD	A,"A"		;make ascii.
 	LD	(BDOSDRV),A	;and put in message.
 	LD	BC,BDOSERR	;and print it.
 	CALL	PRTMESG
@@ -1361,7 +1375,7 @@
 	RET	Z
 	CP	BS
 	RET	Z
-	CP	' '		;other control char? Set carry flag.
+	CP	" "		;other control char? Set carry flag.
 	RET	
 ;
 ;   Check the console during output. Halt on a control-s, then
@@ -1373,7 +1387,7 @@
 	OR	A		;if anything, just return without checking.
 	JP	NZ,CKCON2
 	CALL	CONST		;nothing in buffer. Check console.
-	AND	01H		;look at bit 0.
+	AND	0x01		;look at bit 0.
 	RET	Z		;return if nothing.
 	CALL	CONIN		;ok, get it.
 	CP	CNTRLS		;if not control-s, return with zero cleared.
@@ -1410,7 +1424,7 @@
 	CP	DEL		;rubouts don't do anything here.
 	RET	Z
 	INC	(HL)		;bump line pointer.
-	CP	' '		;and return if a normal character.
+	CP	" "		;and return if a normal character.
 	RET	NC
 	DEC	(HL)		;restore and check for the start of the line.
 	LD	A,(HL)
@@ -1433,10 +1447,10 @@
 	CALL	CHKCHAR		;check character.
 	JP	NC,OUTCON	;not a control, use normal output.
 	PUSH	AF
-	LD	C,'^'		;for a control character, preceed it with '^'.
+	LD	C,"^"		;for a control character, preceed it with '^'.
 	CALL	OUTCHAR
 	POP	AF
-	OR	'@'		;and then use the letter equivelant.
+	OR	"@"		;and then use the letter equivelant.
 	LD	C,A
 ;
 ;   Function to output (C) to the console device and expand tabs
@@ -1445,11 +1459,11 @@
 OUTCON:	LD	A,C
 	CP	TAB		;is it a tab?
 	JP	NZ,OUTCHAR	;use regular output.
-OUTCON1:LD	C,' '		;yes it is, use spaces instead.
+OUTCON1:LD	C," "		;yes it is, use spaces instead.
 	CALL	OUTCHAR
 	LD	A,(CURPOS)	;go until the cursor is at a multiple of 8
 
-	AND	07H		;position.
+	AND	0x07		;position.
 	JP	NZ,OUTCON1
 	RET	
 ;
@@ -1457,7 +1471,7 @@
 ; on the screen.
 ;
 BACKUP:	CALL	BACKUP1		;backup the screen 1 place.
-	LD	C,' '		;then blank that character.
+	LD	C," "		;then blank that character.
 	CALL	CONOUT
 BACKUP1:LD	C,BS		;then back space once more.
 	JP	CONOUT
@@ -1465,14 +1479,14 @@
 ;   Signal a deleted line. Print a '#' at the end and start
 ; over.
 ;
-NEWLINE:LD	C,'#'
+NEWLINE:LD	C,"#"
 	CALL	OUTCHAR		;print this.
 	CALL	OUTCRLF		;start new line.
 NEWLN1:	LD	A,(CURPOS)	;move the cursor to the starting position.
 	LD	HL,STARTING
 	CP	(HL)
 	RET	NC		;there yet?
-	LD	C,' '
+	LD	C," "
 	CALL	OUTCHAR		;nope, keep going.
 	JP	NEWLN1
 ;
@@ -1486,7 +1500,7 @@
 ;   Print message pointed to by (BC). It will end with a '$'.
 ;
 PRTMESG:LD	A,(BC)		;check for terminating character.
-	CP	'$'
+	CP	"$"
 	RET	Z
 	INC	BC
 	PUSH	BC		;otherwise, bump pointer and print it.
@@ -1507,7 +1521,7 @@
 RDBUF1:	PUSH	BC
 	PUSH	HL
 RDBUF2:	CALL	GETCHAR		;get the next input character.
-	AND	7FH		;strip bit 7.
+	AND	0x7F		;strip bit 7.
 	POP	HL		;reset registers.
 	POP	BC
 	CP	CR		;en of the line?
@@ -1681,24 +1695,24 @@
 IOERR1:	LD	A,1
 	JP	SETSTAT
 ;
-OUTFLAG:DEFB	0		;output flag (non zero means no output).
-STARTING: DEFB	2		;starting position for cursor.
-CURPOS:	DEFB	0		;cursor position (0=start of line).
-PRTFLAG:DEFB	0		;printer flag (control-p toggle). List if non zero.
-CHARBUF:DEFB	0		;single input character buffer.
+OUTFLAG:.db	0		;output flag (non zero means no output).
+STARTING: .db	2		;starting position for cursor.
+CURPOS:	.db	0		;cursor position (0=start of line).
+PRTFLAG:.db	0		;printer flag (control-p toggle). List if non zero.
+CHARBUF:.db	0		;single input character buffer.
 ;
 ;   Stack area for BDOS calls.
 ;
-USRSTACK: DEFW	0		;save users stack pointer here.
+USRSTACK: .dw	0		;save users stack pointer here.
 ;
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-STKAREA EQU	$		;end of stack area.
-;
-USERNO:	DEFB	0		;current user number.
-ACTIVE:	DEFB	0		;currently active drive.
-PARAMS:	DEFW	0		;save (DE) parameters here on entry.
-STATUS:	DEFW	0		;status returned from bdos function.
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+	.db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+STKAREA .equ	#.		;end of stack area.
+;
+USERNO:	.db	0		;current user number.
+ACTIVE:	.db	0		;currently active drive.
+PARAMS:	.dw	0		;save (DE) parameters here on entry.
+STATUS:	.dw	0		;status returned from bdos function.
 ;
 ;   Select error occured, jump to error routine.
 ;
@@ -1761,11 +1775,11 @@
 	LD	HL,(DSKSIZE)	;check disk size.
 	LD	A,H		;more than 256 blocks on this?
 	LD	HL,BIGDISK
-	LD	(HL),0FFH	;set to samll.
+	LD	(HL),0xFF	;set to samll.
 	OR	A
 	JP	Z,SELECT1
 	LD	(HL),0		;wrong, set to large.
-SELECT1:LD	A,0FFH		;clear the zero flag.
+SELECT1:LD	A,0xFF		;clear the zero flag.
 	OR	A
 	RET	
 ;
@@ -2040,7 +2054,7 @@
 CHECKSUM: LD	C,128		;length of buffer.
 	LD	HL,(DIRBUF)	;get its location.
 	XOR	A		;clear summation byte.
-CHKSUM1:ADD	A,M		;and compute sum ignoring carries.
+CHKSUM1:ADD	A,(HL)		;and compute sum ignoring carries.
 	INC	HL
 	DEC	C
 	JP	NZ,CHKSUM1
@@ -2079,7 +2093,7 @@
 	LD	C,A
 	CALL	SHIFTR		;shift status such that bit 0 is the
 	LD	A,L		;one of interest for this drive.
-	AND	01H		;and isolate it.
+	AND	0x01		;and isolate it.
 	RET	
 ;
 ;   Function to write protect the current disk.
@@ -2149,7 +2163,7 @@
 ;   Set bit 7 in the 's2' byte of the fcb.
 ;
 SETS2B7:CALL	GETS2		;get the byte.
-	OR	80H		;and set bit 7.
+	OR	0x80		;and set bit 7.
 	LD	(HL),A		;then store.
 	RET	
 ;
@@ -2165,7 +2179,7 @@
 	SUB	(HL)
 	INC	HL
 	LD	A,D
-	SBC	A,M		;set carry if no more names.
+	SBC	A,(HL)		;set carry if no more names.
 	RET	
 ;
 ;   Call this routine to prevent (SCRATCH1) from being greater
@@ -2191,7 +2205,7 @@
 ;
 ;   Set the directory checksum byte.
 ;
-SETDIR:	LD	C,0FFH
+SETDIR:	LD	C,0xFF
 ;
 ;   Routine to set or compare the directory checksum byte. If
 ; (C)=0ffh, then this will set the checksum byte. Else the byte
@@ -2271,7 +2285,7 @@
 ;
 ;   Set location (FILEPOS) to 0ffffh.
 ;
-STFILPOS: LD	HL,0FFFFH
+STFILPOS: LD	HL,0xFFFF
 	LD	(FILEPOS),HL
 	RET	
 ;
@@ -2292,7 +2306,7 @@
 	JP	NC,NXENT1	;is there more room left?
 	JP	STFILPOS	;no. Set this flag and return.
 NXENT1:	LD	A,(FILEPOS)	;get file position within directory.
-	AND	03H		;only look within this sector (only 4 entries fit).
+	AND	0x03		;only look within this sector (only 4 entries fit).
 	LD	B,5		;convert to relative position (32 bytes each).
 NXENT2:	ADD	A,A		;note that this is not efficient code.
 	DEC	B		;5 'ADD A's would be better.
@@ -2313,7 +2327,7 @@
 ; this block number and (HL) will point to the address for it.
 ;
 CKBITMAP: LD	A,C		;determine bit number of interest.
-	AND	07H		;compute (D)=(E)=(C and 7)+1.
+	AND	0x07		;compute (D)=(E)=(C and 7)+1.
 	INC	A
 	LD	E,A		;save particular bit number.
 	LD	D,A
@@ -2324,7 +2338,7 @@
 	RRCA			;now shift right 3 bits.
 	RRCA	
 	RRCA	
-	AND	1FH		;and clear bits 7,6,5.
+	AND	0x1F		;and clear bits 7,6,5.
 	LD	C,A
 	LD	A,B
 	ADD	A,A		;now shift (B) into bits 7,6,5.
@@ -2338,7 +2352,7 @@
 	RRCA	
 	RRCA	
 	RRCA	
-	AND	1FH
+	AND	0x1F
 	LD	B,A		;and now (B) is completed.
 ;
 ;   use this as an offset into the disk space allocation
@@ -2358,7 +2372,7 @@
 ;
 STBITMAP: PUSH	DE
 	CALL	CKBITMAP	;get the byte of interest.
-	AND	0FEH		;clear the affected bit.
+	AND	0xFE		;clear the affected bit.
 	POP	BC
 	OR	C		;and now set it acording to (C).
 ;
@@ -2454,12 +2468,12 @@
 	INC	HL		;in a sector.
 	LD	(HL),0
 	CALL	STFILPOS	;clear initial file position also.
-BITMAP2:LD	C,0FFH		;read next file name in directory
+BITMAP2:LD	C,0xFF		;read next file name in directory
 	CALL	NXENTRY		;and set checksum byte.
 	CALL	CKFILPOS	;is there another file?
 	RET	Z
 	CALL	FCB2HL		;yes, get its address.
-	LD	A,0E5H
+	LD	A,0xE5
 	CP	(HL)		;empty file entry?
 	JP	Z,BITMAP2
 	LD	A,(USERNO)	;no, correct user number?
@@ -2467,7 +2481,7 @@
 	JP	NZ,BITMAP3
 	INC	HL
 	LD	A,(HL)		;yes, does name start with a '$'?
-	SUB	'$'
+	SUB	"$"
 	JP	NZ,BITMAP3
 	DEC	A		;yes, set atatus to minus one.
 	LD	(STATUS),A
@@ -2497,7 +2511,7 @@
 	POP	AF		;now mask second extent and compare
 	AND	B		;with the first one.
 	SUB	C
-	AND	1FH		;(* only check buts 0-4 *)
+	AND	0x1F		;(* only check buts 0-4 *)
 	POP	BC		;the zero flag is set if they are the same.
 	RET			;restore (BC) and return.
 ;
@@ -2505,7 +2519,7 @@
 ; register (C) should contain the number of bytes of the fcb
 ; that must match.
 ;
-FINDFST:LD	A,0FFH
+FINDFST:LD	A,0xFF
 	LD	(FNDSTAT),A
 	LD	HL,COUNTER	;save character count.
 	LD	(HL),C
@@ -2525,7 +2539,7 @@
 	LD	HL,(SAVEFCB)	;set (DE) pointing to filename to match.
 	EX	DE,HL
 	LD	A,(DE)
-	CP	0E5H		;empty directory entry?
+	CP	0xE5		;empty directory entry?
 	JP	Z,FNDNXT1	;(* are we trying to reserect erased entries? *)
 	PUSH	DE
 	CALL	MOREFLS		;more files in directory?
@@ -2539,7 +2553,7 @@
 	OR	A
 	JP	Z,FNDNXT5
 	LD	A,(DE)		;no, check next byte.
-	CP	'?'		;don't care about this character?
+	CP	"?"		;don't care about this character?
 	JP	Z,FNDNXT4
 	LD	A,B		;get bytes position in fcb.
 	CP	13		;don't care about the thirteenth byte either.
@@ -2548,7 +2562,7 @@
 	LD	A,(DE)
 	JP	Z,FNDNXT3
 	SUB	(HL)		;otherwise compare characters.
-	AND	7FH
+	AND	0x7F
 	JP	NZ,FINDNXT	;not the same, check next entry.
 	JP	FNDNXT4		;so far so good, keep checking.
 FNDNXT3:PUSH	BC		;check the extent byte here.
@@ -2566,7 +2580,7 @@
 	DEC	C		;adjust character counter.
 	JP	FNDNXT2
 FNDNXT5:LD	A,(FILEPOS)	;return the position of this entry.
-	AND	03H
+	AND	0x03
 	LD	(STATUS),A
 	LD	HL,FNDSTAT
 	LD	A,(HL)
@@ -2579,7 +2593,7 @@
 ;   Filename was not found. Set appropriate status.
 ;
 FNDNXT6:CALL	STFILPOS	;set (FILEPOS) to 0ffffh.
-	LD	A,0FFH		;say not located.
+	LD	A,0xFF		;say not located.
 	JP	SETSTAT
 ;
 ;   Erase files from the directory. Only the first byte of the
@@ -2592,7 +2606,7 @@
 	RET	Z		;nope, we must be done.
 	CALL	CHKROFL		;is file read only?
 	CALL	FCB2HL		;nope, get address of fcb and
-	LD	(HL),0E5H	;set first byte to 'empty'.
+	LD	(HL),0xE5	;set first byte to 'empty'.
 	LD	C,0		;clear the space from the bit map.
 	CALL	SETFILE
 	CALL	DIRWRITE	;now write the directory sector back out.
@@ -2803,7 +2817,7 @@
 	CALL	GETWPRT		;get write protect bit for this drive.
 	RET	NZ		;just return if it is set.
 	CALL	GETS2		;else get the 's2' byte.
-	AND	80H		;and look at bit 7 (file unmodified?).
+	AND	0x80		;and look at bit 7 (file unmodified?).
 	RET	NZ		;just return if set.
 	LD	C,15		;else look up this file in directory.
 	CALL	FINDFST
@@ -2848,7 +2862,7 @@
 	INC	HL
 	DEC	C		;there are 16 entries only.
 	JP	NZ,CLOSEIT1	;continue if more to do.
-	LD	BC,0FFECH	;backup 20 places (extent byte).
+	LD	BC,0xFFEC	;backup 20 places (extent byte).
 	ADD	HL,BC
 	EX	DE,HL
 	ADD	HL,BC
@@ -2862,7 +2876,7 @@
 	ADD	HL,BC
 	LD	A,(HL)		;get from user.
 	LD	(DE),A		;and put in directory.
-CLOSEIT6: LD	A,0FFH		;set 'was open and is now closed' byte.
+CLOSEIT6: LD	A,0xFF		;set 'was open and is now closed' byte.
 	LD	(CLOSEFLG),A
 	JP	UPDATE1		;update the directory now.
 CLOSEIT7: LD	HL,STATUS	;set return status and then return.
@@ -2912,7 +2926,7 @@
 	ADD	HL,BC
 	LD	A,(HL)		;and increment it.
 	INC	A
-	AND	1FH		;keep within range 0-31.
+	AND	0x1F		;keep within range 0-31.
 	LD	(HL),A
 	JP	Z,GTNEXT1	;overflow?
 	LD	B,A		;mask extent byte.
@@ -2926,7 +2940,7 @@
 	ADD	HL,BC
 	INC	(HL)		;and bump it.
 	LD	A,(HL)		;too many extents?
-	AND	0FH
+	AND	0x0F
 	JP	Z,GTNEXT5	;yes, set error code.
 ;
 ;   Get here to open the next extent.
@@ -2957,7 +2971,7 @@
 ;
 RDSEQ:	LD	A,1		;set sequential access mode.
 	LD	(MODE),A
-RDSEQ1:	LD	A,0FFH		;don't allow reading unwritten space.
+RDSEQ1:	LD	A,0xFF		;don't allow reading unwritten space.
 	LD	(RDWRTFLG),A
 	CALL	STRDATA		;put rec# and ext# into fcb.
 	LD	A,(SAVNREC)	;get next record to read.
@@ -3111,7 +3125,7 @@
 ;
 	PUSH	AF
 	CALL	GETS2		;set 'extent written to' flag.
-	AND	7FH		;(* clear bit 7 *)
+	AND	0x7F		;(* clear bit 7 *)
 	LD	(HL),A
 	POP	AF		;get record count for this extent.
 WTSEQ99:CP	127		;is it full?
@@ -3157,21 +3171,21 @@
 	LD	HL,33		;now get byte 'r0'.
 	ADD	HL,DE
 	LD	A,(HL)
-	AND	7FH		;keep bits 0-6 for the record number to access.
+	AND	0x7F		;keep bits 0-6 for the record number to access.
 	PUSH	AF
 	LD	A,(HL)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
 	RLA	
 	INC	HL
 	LD	A,(HL)
 	RLA	
-	AND	1FH		;and save this in bits 0-4 of (C).
+	AND	0x1F		;and save this in bits 0-4 of (C).
 	LD	C,A		;this is the extent byte.
 	LD	A,(HL)		;now get the extra extent byte.
 	RRA	
 	RRA	
 	RRA	
 	RRA	
-	AND	0FH
+	AND	0x0F
 	LD	B,A		;and save it in (B).
 	POP	AF		;get record number back to (A).
 	INC	HL		;check overflow byte 'r2'.
@@ -3192,7 +3206,7 @@
 	ADD	HL,DE
 	LD	A,B
 	SUB	(HL)
-	AND	7FH
+	AND	0x7F
 	JP	Z,POSITN3	;same, we are almost done then.
 ;
 ;  Get here when another extent is required.
@@ -3237,7 +3251,7 @@
 ;
 POSITN4:PUSH	HL
 	CALL	GETS2
-	LD	(HL),0C0H
+	LD	(HL),0xC0
 	POP	HL
 ;
 ;   Return with error code (presently in L).
@@ -3249,7 +3263,7 @@
 ;
 ;   Read a random record.
 ;
-READRAN:LD	C,0FFH		;set 'read' status.
+READRAN:LD	C,0xFF		;set 'read' status.
 	CALL	POSITION	;position the file to proper record.
 	CALL	Z,RDSEQ1	;and read it as usual (if no errors).
 	RET	
@@ -3277,7 +3291,7 @@
 	ADD	HL,DE
 	LD	A,(HL)		;compute (BC)=(record #)+(extent)*128.
 	RRCA			;move lower bit into bit 7.
-	AND	80H		;and ignore all other bits.
+	AND	0x80		;and ignore all other bits.
 	ADD	A,C		;add to our record number.
 	LD	C,A
 	LD	A,0		;take care of any carry.
@@ -3285,7 +3299,7 @@
 	LD	B,A
 	LD	A,(HL)		;now get the upper bits of extent into
 	RRCA			;bit positions 0-3.
-	AND	0FH		;and ignore all others.
+	AND	0x0F		;and ignore all others.
 	ADD	A,B		;add this in to 'r1' byte.
 	LD	B,A
 	LD	HL,14		;get the 's2' byte (extra extent).
@@ -3303,7 +3317,7 @@
 	LD	A,L
 	POP	HL		;and same for first carry flag.
 	OR	L		;either one of these set?
-	AND	01H		;only check the carry flags.
+	AND	0x01		;only check the carry flags.
 	RET	
 ;
 ;   Routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
@@ -3337,10 +3351,10 @@
 	SUB	(HL)		;in the fcb represent a larger size than
 	INC	HL		;this extent does.
 	LD	A,B
-	SBC	A,M
+	SBC	A,(HL)
 	INC	HL
 	LD	A,E
-	SBC	A,M
+	SBC	A,(HL)
 	JP	C,RANSIZ2
 	LD	(HL),E		;we found a larger (in size) extent.
 	DEC	HL		;stuff these values into fcb.
@@ -3403,20 +3417,20 @@
 ; of the fcb is examined for a drive specification. If non
 ; zero then the drive will be selected and loged in.
 ;
-AUTOSEL:LD	A,0FFH		;say 'auto-select activated'.
+AUTOSEL:LD	A,0xFF		;say 'auto-select activated'.
 	LD	(AUTO),A
 	LD	HL,(PARAMS)	;get drive specified.
 	LD	A,(HL)
-	AND	1FH		;look at lower 5 bits.
+	AND	0x1F		;look at lower 5 bits.
 	DEC	A		;adjust for (1=A, 2=B) etc.
 	LD	(EPARAM),A	;and save for the select routine.
-	CP	1EH		;check for 'no change' condition.
+	CP	0x1E		;check for 'no change' condition.
 	JP	NC,AUTOSL1	;yes, don't change.
 	LD	A,(ACTIVE)	;we must change, save currently active
 	LD	(OLDDRV),A	;drive.
 	LD	A,(HL)		;and save first byte of fcb also.
 	LD	(AUTOFLAG),A	;this must be non-zero.
-	AND	0E0H		;whats this for (bits 6,7 are used for
+	AND	0xE0		;whats this for (bits 6,7 are used for
 	LD	(HL),A		;something)?
 	CALL	SETDSK		;select and log in this drive.
 AUTOSL1:LD	A,(USERNO)	;move user number into fcb.
@@ -3427,7 +3441,7 @@
 ;
 ;   Function to return the current cp/m version number.
 ;
-GETVER:	LD	A,022H		;version 2.2
+GETVER:	LD	A,0x22		;version 2.2
 	JP	SETSTAT
 ;
 ;   Function to reset the disk system.
@@ -3460,11 +3474,11 @@
 GETFST:	LD	C,0		;prepare for special search.
 	EX	DE,HL
 	LD	A,(HL)		;is first byte a '?'?
-	CP	'?'
+	CP	"?"
 	JP	Z,GETFST1	;yes, just get very first entry (zero length match).
 	CALL	SETEXT		;get the extension byte from fcb.
 	LD	A,(HL)		;is it '?'? if yes, then we want
-	CP	'?'		;an entry with a specific 's2' byte.
+	CP	"?"		;an entry with a specific 's2' byte.
 	CALL	NZ,CLEARS2	;otherwise, look for a zero 's2' byte.
 	CALL	AUTOSEL		;select proper drive.
 	LD	C,15		;compare bytes 0-14 in fcb (12&13 excluded).
@@ -3552,11 +3566,11 @@
 ; Else set the user number from (E).
 ;
 GETUSER:LD	A,(EPARAM)	;get parameter.
-	CP	0FFH		;get user number?
+	CP	0xFF		;get user number?
 	JP	NZ,SETUSER
 	LD	A,(USERNO)	;yes, just do it.
 	JP	SETSTAT
-SETUSER:AND	1FH		;no, we should set it instead. keep low
+SETUSER:AND	0x1F		;no, we should set it instead. keep low
 	LD	(USERNO),A	;bits (0-4) only.
 	RET	
 ;
@@ -3647,66 +3661,66 @@
 ;*
 ;**************************************************************
 ;
-EMPTYFCB: DEFB	0E5H		;empty directory segment indicator.
-WRTPRT:	DEFW	0		;write protect status for all 16 drives.
-LOGIN:	DEFW	0		;drive active word (1 bit per drive).
-USERDMA:DEFW	080H		;user's dma address (defaults to 80h).
+EMPTYFCB: .db	0xE5		;empty directory segment indicator.
+WRTPRT:	.dw	0		;write protect status for all 16 drives.
+LOGIN:	.dw	0		;drive active word (1 bit per drive).
+USERDMA:.dw	0x80		;user's dma address (defaults to 80h).
 ;
 ;   Scratch areas from parameter block.
 ;
-SCRATCH1: DEFW	0		;relative position within dir segment for file (0-3).
-SCRATCH2: DEFW	0		;last selected track number.
-SCRATCH3: DEFW	0		;last selected sector number.
+SCRATCH1: .dw	0		;relative position within dir segment for file (0-3).
+SCRATCH2: .dw	0		;last selected track number.
+SCRATCH3: .dw	0		;last selected sector number.
 ;
 ;   Disk storage areas from parameter block.
 ;
-DIRBUF:	DEFW	0		;address of directory buffer to use.
-DISKPB:	DEFW	0		;contains address of disk parameter block.
-CHKVECT:DEFW	0		;address of check vector.
-ALOCVECT: DEFW	0		;address of allocation vector (bit map).
+DIRBUF:	.dw	0		;address of directory buffer to use.
+DISKPB:	.dw	0		;contains address of disk parameter block.
+CHKVECT:.dw	0		;address of check vector.
+ALOCVECT: .dw	0		;address of allocation vector (bit map).
 ;
 ;   Parameter block returned from the bios.
 ;
-SECTORS:DEFW	0		;sectors per track from bios.
-BLKSHFT:DEFB	0		;block shift.
-BLKMASK:DEFB	0		;block mask.
-EXTMASK:DEFB	0		;extent mask.
-DSKSIZE:DEFW	0		;disk size from bios (number of blocks-1).
-DIRSIZE:DEFW	0		;directory size.
-ALLOC0:	DEFW	0		;storage for first bytes of bit map (dir space used).
-ALLOC1:	DEFW	0
-OFFSET:	DEFW	0		;first usable track number.
-XLATE:	DEFW	0		;sector translation table address.
-;
-;
-CLOSEFLG: DEFB	0		;close flag (=0ffh is extent written ok).
-RDWRTFLG: DEFB	0		;read/write flag (0ffh=read, 0=write).
-FNDSTAT:DEFB	0		;filename found status (0=found first entry).
-MODE:	DEFB	0		;I/o mode select (0=random, 1=sequential, 2=special random).
-EPARAM:	DEFB	0		;storage for register (E) on entry to bdos.
-RELBLOCK: DEFB	0		;relative position within fcb of block number written.
-COUNTER:DEFB	0		;byte counter for directory name searches.
-SAVEFCB:DEFW	0,0		;save space for address of fcb (for directory searches).
-BIGDISK:DEFB	0		;if =0 then disk is > 256 blocks long.
-AUTO:	DEFB	0		;if non-zero, then auto select activated.
-OLDDRV:	DEFB	0		;on auto select, storage for previous drive.
-AUTOFLAG: DEFB	0		;if non-zero, then auto select changed drives.
-SAVNXT:	DEFB	0		;storage for next record number to access.
-SAVEXT:	DEFB	0		;storage for extent number of file.
-SAVNREC:DEFW	0		;storage for number of records in file.
-BLKNMBR:DEFW	0		;block number (physical sector) used within a file or logical sect
-LOGSECT:DEFW	0		;starting logical (128 byte) sector of block (physical sector).
-FCBPOS:	DEFB	0		;relative position within buffer for fcb of file of interest.
-FILEPOS:DEFW	0		;files position within directory (0 to max entries -1).
+SECTORS:.dw	0		;sectors per track from bios.
+BLKSHFT:.db	0		;block shift.
+BLKMASK:.db	0		;block mask.
+EXTMASK:.db	0		;extent mask.
+DSKSIZE:.dw	0		;disk size from bios (number of blocks-1).
+DIRSIZE:.dw	0		;directory size.
+ALLOC0:	.dw	0		;storage for first bytes of bit map (dir space used).
+ALLOC1:	.dw	0
+OFFSET:	.dw	0		;first usable track number.
+XLATE:	.dw	0		;sector translation table address.
+;
+;
+CLOSEFLG: .db	0		;close flag (=0ffh is extent written ok).
+RDWRTFLG: .db	0		;read/write flag (0ffh=read, 0=write).
+FNDSTAT:.db	0		;filename found status (0=found first entry).
+MODE:	.db	0		;I/o mode select (0=random, 1=sequential, 2=special random).
+EPARAM:	.db	0		;storage for register (E) on entry to bdos.
+RELBLOCK: .db	0		;relative position within fcb of block number written.
+COUNTER:.db	0		;byte counter for directory name searches.
+SAVEFCB:.dw	0,0		;save space for address of fcb (for directory searches).
+BIGDISK:.db	0		;if =0 then disk is > 256 blocks long.
+AUTO:	.db	0		;if non-zero, then auto select activated.
+OLDDRV:	.db	0		;on auto select, storage for previous drive.
+AUTOFLAG: .db	0		;if non-zero, then auto select changed drives.
+SAVNXT:	.db	0		;storage for next record number to access.
+SAVEXT:	.db	0		;storage for extent number of file.
+SAVNREC:.dw	0		;storage for number of records in file.
+BLKNMBR:.dw	0		;block number (physical sector) used within a file or logical sect
+LOGSECT:.dw	0		;starting logical (128 byte) sector of block (physical sector).
+FCBPOS:	.db	0		;relative position within buffer for fcb of file of interest.
+FILEPOS:.dw	0		;files position within directory (0 to max entries -1).
 ;
 ;   Disk directory buffer checksum bytes. One for each of the
 ; 16 possible drives.
 ;
-CKSUMTBL: DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+CKSUMTBL: .db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 ;
 ;   Extra space ?
 ;
-	DEFB	0,0,0,0
+	.db	0,0,0,0
 ;
 ;**************************************************************
 ;*
